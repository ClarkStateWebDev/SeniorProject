{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\horne\\\\Documents\\\\SeniorProject\\\\ehr\\\\client\\\\src\\\\context\\\\UserContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Navigate, Routes } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext({});\nexport const UserProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [currentUser, setCurrentUser] = useState('');\n  const [isAuth, setIsAuth] = useState('');\n  const [isAdmin, setIsAdmin] = useState('');\n  const [roles, setRoles] = useState('');\n  const [error, setError] = useState('');\n  const [errorMsg, setErrorMsg] = useState('');\n  const [userID, setUserID] = useState('');\n  const [user, setUser] = useState({\n    id: 0,\n    fName: \"\",\n    lName: \"\",\n    email: \"\",\n    roles: 0\n  });\n  const [login, setLogin] = useState({\n    email: '',\n    password: ''\n  });\n  useEffect(() => {\n    checkLogin();\n  }, []);\n\n  const checkLogin = () => {\n    let isAuth = sessionStorage.getItem(\"accessToken\");\n    let user = JSON.parse(sessionStorage.getItem(\"user\"));\n\n    if (isAuth) {\n      setUser({ ...user,\n        [user.name]: user.value\n      });\n      setIsAuth(\"true\");\n      setRoles(user.roles);\n    }\n\n    ;\n  };\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      setUser,\n      currentUser,\n      setCurrentUser,\n      error,\n      setError,\n      errorMsg,\n      setErrorMsg,\n      login,\n      setLogin,\n      roles,\n      setRoles,\n      isAuth,\n      setIsAuth,\n      isAdmin,\n      setIsAdmin,\n      userID,\n      setUserID\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UserProvider, \"AZ4a8UEZXVXHB57y+TDIswEX1F0=\");\n\n_c = UserProvider;\nexport default UserContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"sources":["C:/Users/horne/Documents/SeniorProject/ehr/client/src/context/UserContext.js"],"names":["createContext","useState","useEffect","BrowserRouter","Router","Route","Navigate","Routes","UserContext","UserProvider","children","currentUser","setCurrentUser","isAuth","setIsAuth","isAdmin","setIsAdmin","roles","setRoles","error","setError","errorMsg","setErrorMsg","userID","setUserID","user","setUser","id","fName","lName","email","login","setLogin","password","checkLogin","sessionStorage","getItem","JSON","parse","name","value"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,SACIC,aAAa,IAAIC,MADrB,EAEIC,KAFJ,EAGIC,QAHJ,EAIIC,MAJJ,QAKO,kBALP;;AAOA,MAAMC,WAAW,gBAAGR,aAAa,CAAC,EAAD,CAAjC;AAEA,OAAO,MAAMS,YAAY,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC1C,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACc,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACgB,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACkB,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACoB,QAAD,EAAWC,WAAX,IAA0BrB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACsB,MAAD,EAASC,SAAT,IAAsBvB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACwB,IAAD,EAAOC,OAAP,IAAkBzB,QAAQ,CAAC;AAC/B0B,IAAAA,EAAE,EAAE,CAD2B;AAE/BC,IAAAA,KAAK,EAAE,EAFwB;AAG/BC,IAAAA,KAAK,EAAE,EAHwB;AAI/BC,IAAAA,KAAK,EAAE,EAJwB;AAK/Bb,IAAAA,KAAK,EAAE;AALwB,GAAD,CAAhC;AAQA,QAAM,CAACc,KAAD,EAAQC,QAAR,IAAoB/B,QAAQ,CAAC;AACjC6B,IAAAA,KAAK,EAAE,EAD0B;AAEjCG,IAAAA,QAAQ,EAAE;AAFuB,GAAD,CAAlC;AAKA/B,EAAAA,SAAS,CAAC,MAAM;AACdgC,IAAAA,UAAU;AACX,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,UAAU,GAAG,MAAM;AACvB,QAAIrB,MAAM,GAAGsB,cAAc,CAACC,OAAf,CAAuB,aAAvB,CAAb;AACA,QAAIX,IAAI,GAAGY,IAAI,CAACC,KAAL,CAAWH,cAAc,CAACC,OAAf,CAAuB,MAAvB,CAAX,CAAX;;AACA,QAAGvB,MAAH,EAAU;AACNa,MAAAA,OAAO,CAAC,EAAC,GAAGD,IAAJ;AAAU,SAACA,IAAI,CAACc,IAAN,GAAad,IAAI,CAACe;AAA5B,OAAD,CAAP;AACA1B,MAAAA,SAAS,CAAC,MAAD,CAAT;AACAI,MAAAA,QAAQ,CAACO,IAAI,CAACR,KAAN,CAAR;AACH;;AAAA;AACJ,GARC;;AASA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AACzBQ,MAAAA,IADyB;AACnBC,MAAAA,OADmB;AAEzBf,MAAAA,WAFyB;AAEZC,MAAAA,cAFY;AAGzBO,MAAAA,KAHyB;AAGlBC,MAAAA,QAHkB;AAIzBC,MAAAA,QAJyB;AAIfC,MAAAA,WAJe;AAKzBS,MAAAA,KALyB;AAKlBC,MAAAA,QALkB;AAMzBf,MAAAA,KANyB;AAMlBC,MAAAA,QANkB;AAOzBL,MAAAA,MAPyB;AAOjBC,MAAAA,SAPiB;AAQzBC,MAAAA,OARyB;AAQhBC,MAAAA,UARgB;AASzBO,MAAAA,MATyB;AASjBC,MAAAA;AATiB,KAA7B;AAAA,cAWKd;AAXL;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH,CAjDM;;GAAMD,Y;;KAAAA,Y;AAmDb,eAAeD,WAAf","sourcesContent":["import { createContext, useState, useEffect } from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Route,\r\n    Navigate,\r\n    Routes\r\n} from 'react-router-dom';\r\n\r\nconst UserContext = createContext({});\r\n\r\nexport const UserProvider = ({ children }) => {\r\n    const [currentUser, setCurrentUser] = useState('');\r\n    const [isAuth, setIsAuth] = useState('');\r\n    const [isAdmin, setIsAdmin] = useState('');\r\n    const [roles, setRoles] = useState('');\r\n    const [error, setError] = useState('');\r\n    const [errorMsg, setErrorMsg] = useState('');\r\n    const [userID, setUserID] = useState('');\r\n    const [user, setUser] = useState({\r\n      id: 0,\r\n      fName: \"\",\r\n      lName: \"\",\r\n      email: \"\",\r\n      roles: 0\r\n    })\r\n\r\n    const [login, setLogin] = useState({\r\n      email: '',\r\n      password: ''\r\n    })\r\n\r\n    useEffect(() => {\r\n      checkLogin();\r\n    }, []);\r\n\r\n    const checkLogin = () => {\r\n      let isAuth = sessionStorage.getItem(\"accessToken\");\r\n      let user = JSON.parse(sessionStorage.getItem(\"user\"));\r\n      if(isAuth){\r\n          setUser({...user, [user.name]: user.value });\r\n          setIsAuth(\"true\");\r\n          setRoles(user.roles);\r\n      };\r\n  }; \r\n    return (\r\n        <UserContext.Provider value={{\r\n            user, setUser,\r\n            currentUser, setCurrentUser,\r\n            error, setError,\r\n            errorMsg, setErrorMsg,\r\n            login, setLogin,\r\n            roles, setRoles,\r\n            isAuth, setIsAuth,\r\n            isAdmin, setIsAdmin,\r\n            userID, setUserID\r\n        }}>\r\n            {children}\r\n        </UserContext.Provider>\r\n    )\r\n}\r\n\r\nexport default UserContext;"]},"metadata":{},"sourceType":"module"}